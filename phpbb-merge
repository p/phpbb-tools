#!/usr/bin/env perl

# Usage:
#
# Initial merge:
#
# phpbb-merge galaxyAbstractor/ticket/10836 771
# phpbb-merge galaxyAbstractor/ticket/10836 771 develop-olympus
# phpbb-merge galaxyAbstractor/ticket/10836 771 o
#
# Merging develop-olympus into develop:
#
# phpbb-merge -d

use strict;
use warnings;
use PHPBB::Git;
use Getopt::Long;

my ($branch, $pr, $target, $forward);

$forward = 0;

my $home = $ENV{'HOME'};
my $state_file = "$home/.phpbb-merge-state";

my $develop = '';

GetOptions('develop' => \$develop);

if ($develop) {
    if (-e $state_file) {
        open FH, "<$state_file" || die "Could not open $state_file: $!";
        my $contents = <FH>;
        close FH;
        ($forward, $pr, $branch) = split ' ', $contents;
        $forward = 1;
        $target = 'develop';
    }
}

if (!$branch) {
    ($branch, $pr, $target) = @ARGV;
}

if (!$pr) {
    print "Usage: phpbb-merge branch PR\n";
    print "       phpbb-merge -d\n";
    exit 5;
}

if ($target and $target eq 'o' || $target eq 'olympus') {
    $target = 'develop-olympus';
}

if (!$target) {
    $target = PHPBB::Git::determine_base($branch);
}

unless ($target) {
    print "Could not determine target branch for merging\n";
    exit 5;
}

print "Merging $branch into $target for PR #$pr\n";

my $current_branch = `git branch |grep '^\*' |awk '{print \$2}'`;

if ($current_branch ne $target) {
    print `git checkout "$target"`;
}

if (!$forward) {
    open FH, ">$state_file" or die "Could not open state file: $!";
    print FH "$branch $pr $target";
    close FH;
}

print `git merge --no-ff "$branch"`;

my $sed_cmd;
if ($forward) {
    $sed_cmd = qq.sed -e 's/^Merge branch/Merge PR #$pr branch/'.;
} else {
    $sed_cmd = qq.sed -e s/remote-tracking/'PR #$pr'/.;
}

print `git filter-branch  --msg-filter "$sed_cmd" -f -- --max-count=1 HEAD`;

if ($forward) {
    if (-e $state_file) {
        unlink($state_file);
    }
}
